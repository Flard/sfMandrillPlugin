<?php

/**
 * PluginOutboundEmail
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginOutboundEmail extends BaseOutboundEmail
{
    public static function newInstance() {
        return new OutboundEmail();
    }

    protected $messageData;
    public function getMessageDataObject() {
        if (!isset($this->messageData)) {
            if (!empty($this->message_data)) {
                $this->messageData = json_decode($this->message_data);
            } else {
                $this->messageData = new stdClass();
            }
        }
        return $this->messageData;
    }

    protected function setMD($field, $value) {
        $this->getMessageDataObject()->$field = $value;
    }

    public function setTo($emailAddress, $name = null) {
        $to = array("email" => $emailAddress);
        if (!empty($name)) {
            $to['name'] = $name;
        }
        $this->getMessageDataObject()->to = array($to);
        return $this;
    }

    public function addTo($emailAddress, $name = null) {

        if (!isset($this->getMessageDataObject()->to)) {
            return $this->setTo($emailAddress, $name);
        }
        $to = array("email" => $emailAddress);
        if (!empty($name)) {
            $to['name'] = $name;
        }
        $this->getMessageDataObject()->to[] = $to;
        return $this;
    }

    public function addHeader($key, $value) {
        $this->getMessageData()->headers->$key = $value;
        return $this;
    }

    public function setFrom($emailAddress, $name = null) {
        $this->getMessageDataObject()->from_email = $emailAddress;
        if (!empty($name)) {
            $this->setFromName($name);
        }
        return $this;
    }

    public function setFromName($name) {
        $this->getMessageDataObject()->from_name = $name;
        return $this;
    }

    public function setSubject($subject) {
        $this->getMessageDataObject()->subject = $subject;
        return $this;
    }

    public function setBody($html, $text = null) {
        $this->getMessageDataObject()->html = $html;
        if (!empty($text)) {
            $this->setBodyText($text);
        } else {
            $this->getMessageDataObject()->auto_text = true;
        }
        return $this;
    }

    public function setBodyText($text) {
        $this->getMessageDataObject()->text = $text;
        return $this;
    }

    public function setTrackClicks($enable) {
        $this->getMessageDataObject()->track_clicks = $enable;
        return $this;
    }

    public function setGlobalMergeVars($vars) {
        $this->getMessageDataObject()->global_merge_vars = array();
        foreach($vars as $name => $content) {
            $this->getMessageDataObject()->global_merge_vars[] = array('name' => $name, 'content' => $content);
        }
        return $this;
    }

    public function setTemplateName($name) {
        $this->template_name = $name;
        return $this;
    }

    public function setTemplateVars($vars) {
        $this->template_content = json_encode($vars);
        return $this;
    }

    public function preSave($event) {
        if (empty($this->token)) {
            $this->generateToken();
        }
        if (isset($this->messageData)) {
            $this->message_data = json_encode($this->messageData);
        }
    }

    protected function generateToken() {
        $token = sha1(rand().uniqid());
        $this->token = $token;
        $this->addHeader('X-Drek-Token', $token);
    }

    public function send() {
        return $this->save();
    }

    public function hasTemplate() {
        return !empty($this->template_name);
    }
}